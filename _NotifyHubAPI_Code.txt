# NotifyHubAPI - 邮件通知API服务
## 项目概述
独立的邮件通知API服务，基于ASP.NET Core Web API开发
为多个项目提供统一的邮件发送功能，支持多租户、重试机制、状态跟踪等功能

## 文件索引

### 根目录
- GlobalUsings.cs (652 B)
- NotifyHubAPI.csproj (1.4 KB)
- Program.cs (6.9 KB)
- appsettings.Development.json (491 B)
- appsettings.Production.json (819 B)
- appsettings.json (2.5 KB)

### Controllers
- Controllers\EmailController.cs (6.8 KB)

### Middleware
- Middleware\ApiKeyMiddleware.cs (7.1 KB)

### Models
- Models\ApiResponse.cs (1.2 KB)
- Models\EmailRecord.cs (1.7 KB)
- Models\EmailRequest.cs (1.3 KB)

### Services
- Services\ApiKeyService.cs (2.8 KB)
- Services\EmailService.cs (5.5 KB)
- Services\IEmailService.cs (2.3 KB)
- Services\SmtpSettings.cs (473 B)

## 项目统计
- 总文件数: 15
- 总大小: 41.8 KB
- 生成时间: 2025-09-22 22:21:55
- 项目路径: D:\Programing\C#\NotifyHubAPI\NotifyHubAPI

## 技术栈
- ASP.NET Core 8.0 Web API
- Entity Framework Core (SQL Server)
- MailKit (邮件发送)
- Serilog (日志记录)
- AspNetCoreRateLimit (速率限制)

================================================================================
## 文件内容
================================================================================


### 根目录 文件夹
--------------------------------------------------

#### 文件: GlobalUsings.cs
```csharp
﻿// 全局 using 声明，避免在每个文件中重复引用常用命名空间

global using System;
global using System.Collections.Generic;
global using System.ComponentModel.DataAnnotations;
global using System.Linq;
global using System.Threading;
global using System.Threading.Tasks;

global using Microsoft.AspNetCore.Mvc;
global using Microsoft.Extensions.Configuration;
global using Microsoft.Extensions.DependencyInjection;
global using Microsoft.Extensions.Hosting;
global using Microsoft.Extensions.Logging;
global using Microsoft.Extensions.Options;

global using NotifyHubAPI.Models;
global using NotifyHubAPI.Services;
```

#### 文件: NotifyHubAPI.csproj
```xml
<Project Sdk="Microsoft.NET.Sdk.Web">

	<PropertyGroup>
		<TargetFramework>net8.0</TargetFramework>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>
		<UserSecretsId>NotifyHubAPI-2024</UserSecretsId>
		<DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
	</PropertyGroup>

	<ItemGroup>
		<!-- ASP.NET Core 相关包 -->
		<PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="8.0.0" />
		<PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />

		<!-- 健康检查相关包 -->
		<PackageReference Include="Microsoft.Extensions.Diagnostics.HealthChecks" Version="8.0.0" />

		<!-- 日志相关包 -->
		<PackageReference Include="Serilog.AspNetCore" Version="8.0.0" />
		<PackageReference Include="Serilog.Sinks.Console" Version="5.0.0" />
		<PackageReference Include="Serilog.Sinks.File" Version="5.0.0" />

		<!-- 验证和安全相关包 -->
		<PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.0" />
		<PackageReference Include="System.ComponentModel.Annotations" Version="5.0.0" />

		<!-- 速率限制包 -->
		<PackageReference Include="AspNetCoreRateLimit" Version="5.0.0" />

		<!-- 邮件发送包 -->
		<PackageReference Include="MailKit" Version="4.7.1" />
		<PackageReference Include="MimeKit" Version="4.7.1" />
	</ItemGroup>

	<ItemGroup>
		<Folder Include="Extensions\" />
		<Folder Include="Deploy\" />
	</ItemGroup>

</Project>
```

#### 文件: Program.cs
```csharp
using NotifyHubAPI.Services;
using NotifyHubAPI.Middleware;
using Serilog;
using AspNetCoreRateLimit;

var builder = WebApplication.CreateBuilder(args);

//  Serilog
Log.Logger = new LoggerConfiguration()
    .ReadFrom.Configuration(builder.Configuration)
    .Enrich.FromLogContext()
    .WriteTo.Console()
    .WriteTo.File("logs/notifyhub-.log", rollingInterval: RollingInterval.Day)
    .CreateLogger();

builder.Host.UseSerilog();

// ÷
ConfigureServices(builder.Services, builder.Configuration);

var app = builder.Build();

// HTTPܵ
ConfigurePipeline(app);

Log.Information("NotifyHubAPI : {Urls}", string.Join(", ", app.Urls));

try
{
    await app.RunAsync();
}
catch (Exception ex)
{
    Log.Fatal(ex, "Ӧóʧ");
}
finally
{
    Log.CloseAndFlush();
}

void ConfigureServices(IServiceCollection services, IConfiguration configuration)
{
    // 
    services.AddControllers();
    services.AddEndpointsApiExplorer();
    services.AddSwaggerGen(c =>
    {
        c.SwaggerDoc("v1", new Microsoft.OpenApi.Models.OpenApiInfo
        {
            Title = "NotifyHub API",
            Version = "v1.0",
            Description = "ͳһʼ֪ͨAPI - ΪĿṩͳһʼ֪ͨ",
            Contact = new Microsoft.OpenApi.Models.OpenApiContact
            {
                Name = "NotifyHub Team",
                Email = "admin@notify.origami7023.cn"
            }
        });

        // API Key֤Swagger
        c.AddSecurityDefinition("ApiKey", new Microsoft.OpenApi.Models.OpenApiSecurityScheme
        {
            Description = "API Key֤ (Header: X-API-Key  Authorization: Bearer {key})",
            Name = "X-API-Key",
            In = Microsoft.OpenApi.Models.ParameterLocation.Header,
            Type = Microsoft.OpenApi.Models.SecuritySchemeType.ApiKey,
            Scheme = "ApiKeyScheme"
        });

        c.AddSecurityRequirement(new Microsoft.OpenApi.Models.OpenApiSecurityRequirement
        {
            {
                new Microsoft.OpenApi.Models.OpenApiSecurityScheme
                {
                    Reference = new Microsoft.OpenApi.Models.OpenApiReference
                    {
                        Type = Microsoft.OpenApi.Models.ReferenceType.SecurityScheme,
                        Id = "ApiKey"
                    }
                },
                Array.Empty<string>()
            }
        });
    });

    // SMTP
    services.Configure<SmtpSettings>(configuration.GetSection("SmtpSettings"));

    // ע - ʹü򻯰汾ʼ
    services.AddScoped<IEmailService, SimpleEmailService>();
    services.AddSingleton<IApiKeyService, ApiKeyService>();

    // ڴ滺
    services.AddMemoryCache();
    services.Configure<IpRateLimitOptions>(configuration.GetSection("IpRateLimiting"));
    services.Configure<IpRateLimitPolicies>(configuration.GetSection("IpRateLimitPolicies"));
    services.AddInMemoryRateLimiting();
    services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();

    //  - Ƴݿ
    services.AddHealthChecks()
        .AddCheck("smtp", () =>
        {
            try
            {
                var smtpSettings = configuration.GetSection("SmtpSettings").Get<SmtpSettings>();
                return !string.IsNullOrEmpty(smtpSettings?.Host)
                    ? Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.Healthy("SMTP")
                    : Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.Unhealthy("SMTPȱʧ");
            }
            catch (Exception ex)
            {
                return Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.Unhealthy($"SMTPüʧ: {ex.Message}");
            }
        })
        .AddCheck("apikeys", () =>
        {
            try
            {
                var apiKeysSection = configuration.GetSection("ApiKeys");
                var apiKeyCount = apiKeysSection.GetChildren().Count();
                return apiKeyCount > 0
                    ? Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.Healthy($"{apiKeyCount}APIԿ")
                    : Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.Unhealthy("δAPIԿ");
            }
            catch (Exception ex)
            {
                return Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult.Unhealthy($"APIԿʧ: {ex.Message}");
            }
        });

    // CORS
    services.AddCors(options =>
    {
        options.AddPolicy("AllowOrigins", policy =>
        {
            var allowedOrigins = configuration.GetSection("Cors:AllowedOrigins").Get<string[]>()
                ?? new[] { "https://notify.origami7023.cn", "https://localhost:7000" };

            policy.WithOrigins(allowedOrigins)
                  .AllowAnyMethod()
                  .AllowAnyHeader()
                  .AllowCredentials();
        });
    });
}

void ConfigurePipeline(WebApplication app)
{
    // 
    if (app.Environment.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
        app.UseSwagger();
        app.UseSwaggerUI(c =>
        {
            c.SwaggerEndpoint("/swagger/v1/swagger.json", "NotifyHub API v1");
            c.RoutePrefix = string.Empty; // ʹSwaggerΪ·
        });
    }
    else
    {
        app.UseExceptionHandler("/Error");
        app.UseHsts();
    }

    // мܵ
    app.UseHttpsRedirection();
    app.UseCors("AllowOrigins");

    // 
    app.UseIpRateLimiting();

    // Զм
    app.UseApiKeyAuthentication();

    // ·ɺͿ
    app.UseRouting();
    app.UseAuthorization();
    app.MapControllers();

    // ˵
    app.MapHealthChecks("/health");
    app.MapHealthChecks("/health/ready", new Microsoft.AspNetCore.Diagnostics.HealthChecks.HealthCheckOptions
    {
        Predicate = check => check.Tags.Contains("ready")
    });
    app.MapHealthChecks("/health/live", new Microsoft.AspNetCore.Diagnostics.HealthChecks.HealthCheckOptions
    {
        Predicate = _ => false
    });

    // Ĭ·
    app.MapGet("/", () => Results.Redirect("/swagger"));

    // ״̬Ϣ˵ - 򻯰汾
    app.MapGet("/info", () =>
    {
        return Results.Ok(new
        {
            service = "NotifyHubAPI",
            version = "1.0.0 (Stateless)",
            environment = app.Environment.EnvironmentName,
            timestamp = DateTime.UtcNow,
            mode = "ݿģʽ",
            status = "",
            features = new
            {
                emailSending = true,
                emailHistory = false,
                retryMechanism = false,
                persistence = false
            },
            message = "ʼ͹淢ͼ¼"
        });
    });
}
```

#### 文件: appsettings.Development.json
```json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "NotifyHubAPI": "Debug"
    }
  },
  "ConnectionStrings": {
    "DefaultConnection": "Data Source=notifyhub.db"
  },
  "SmtpSettings": {
    "Host": "smtp.qq.com",
    "Port": 587,
    "UseSsl": true,
    "Username": "2840080918@qq.com",
    "Password": "ojqniznhexwqdhcg",
    "FromEmail": "2840080918@qq.com",
    "FromName": "NotifyHub开发测试"
  }
}
```

#### 文件: appsettings.Production.json
```json
﻿{
  "Logging": {
    "LogLevel": {
      "Default": "Information"
    }
  },
  "SmtpSettings": {
    "Host": "smtp.qq.com",
    "Port": 587,
    "UseSsl": true,
    "Username": "2840080918@qq.com",
    "Password": "ojqniznhexwqdhcg",
    "FromEmail": "2840080918@qq.com",
    "FromName": "NotifyHub"
  },
  "ApiKeys": {
    "DEFAULT": "default-api-key-2024"
  },
  "Serilog": {
    "Using": [ "Serilog.Sinks.Console", "Serilog.Sinks.File" ],
    "MinimumLevel": {
      "Default": "Information",
      "Override": {
        "Microsoft": "Warning"
      }
    },
    "WriteTo": [
      {
        "Name": "Console"
      },
      {
        "Name": "File",
        "Args": {
          "path": "logs/notifyhub-.log",
          "rollingInterval": "Day"
        }
      }
    ]
  }
}
```

#### 文件: appsettings.json
```json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "DefaultConnection": "Server=localhost;Database=NotificationApi;Trusted_Connection=true;TrustServerCertificate=true;"
  },
  "SmtpSettings": {
    "Host": "smtp.qq.com",
    "Port": 587,
    "UseSsl": true,
    "Username": "2840080918@qq.com",
    "Password": "ojqniznhexwqdhcg",
    "FromEmail": "2840080918@qq.com",
    "FromName": "通知系统"
  },
  "ApiKeys": {
    "FMS_DATA_PROCESSOR": "fms-secure-api-key-2024",
    "DEFAULT": "default-api-key-2024"
  },
  "RateLimiting": {
    "RequestsPerMinute": 60,
    "RequestsPerHour": 1000
  },
  "RetrySettings": {
    "MaxRetryAttempts": 3,
    "RetryDelayMinutes": 5,
    "CheckIntervalMinutes": 5
  },
  "IpRateLimiting": {
    "EnableEndpointRateLimiting": false,
    "StackBlockedRequests": false,
    "RealIpHeader": "X-Real-IP",
    "ClientIdHeader": "X-ClientId",
    "HttpStatusCode": 429,
    "GeneralRules": [
      {
        "Endpoint": "*",
        "Period": "1m",
        "Limit": 60
      },
      {
        "Endpoint": "*",
        "Period": "1h",
        "Limit": 1000
      },
      {
        "Endpoint": "*/api/email/send",
        "Period": "1m",
        "Limit": 30
      }
    ]
  },
  "IpRateLimitPolicies": {
    "IpRules": [
      {
        "Ip": "127.0.0.1",
        "Rules": [
          {
            "Endpoint": "*",
            "Period": "1m",
            "Limit": 200
          }
        ]
      }
    ]
  },
  "Serilog": {
    "Using": [ "Serilog.Sinks.Console", "Serilog.Sinks.File" ],
    "MinimumLevel": {
      "Default": "Information",
      "Override": {
        "Microsoft": "Warning",
        "Microsoft.Hosting.Lifetime": "Information",
        "Microsoft.EntityFrameworkCore": "Warning"
      }
    },
    "WriteTo": [
      {
        "Name": "Console",
        "Args": {
          "outputTemplate": "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj} {Properties:j}{NewLine}{Exception}"
        }
      },
      {
        "Name": "File",
        "Args": {
          "path": "logs/notifyhub-.log",
          "rollingInterval": "Day",
          "retainedFileCountLimit": 30,
          "outputTemplate": "[{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} {Level:u3}] {Message:lj} {Properties:j}{NewLine}{Exception}"
        }
      }
    ],
    "Enrich": [ "FromLogContext" ]
  }
}
```


### Controllers 文件夹
--------------------------------------------------

#### 文件: Controllers\EmailController.cs
```csharp
﻿using Microsoft.AspNetCore.Mvc;
using NotifyHubAPI.Models;
using NotifyHubAPI.Services;
using System.ComponentModel.DataAnnotations;
using System.Text.RegularExpressions;

namespace NotifyHubAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class EmailController : ControllerBase
    {
        private readonly IEmailService _emailService;
        private readonly IApiKeyService _apiKeyService;
        private readonly ILogger<EmailController> _logger;

        public EmailController(
            IEmailService emailService,
            IApiKeyService apiKeyService,
            ILogger<EmailController> logger)
        {
            _emailService = emailService;
            _apiKeyService = apiKeyService;
            _logger = logger;
        }

        /// <summary>
        /// 发送邮件
        /// </summary>
        /// <param name="request">邮件发送请求</param>
        /// <returns>发送结果</returns>
        [HttpPost("send")]
        [ProducesResponseType(typeof(ApiResponse<EmailSendResponse>), 200)]
        [ProducesResponseType(typeof(ApiResponse<object>), 400)]
        [ProducesResponseType(typeof(ApiResponse<object>), 401)]
        [ProducesResponseType(typeof(ApiResponse<object>), 500)]
        public async Task<IActionResult> SendEmail([FromBody] EmailRequest request)
        {
            try
            {
                // 获取API Key
                var apiKey = GetApiKeyFromRequest();
                if (string.IsNullOrEmpty(apiKey))
                {
                    return Unauthorized(ApiResponse<object>.FailureResult("缺少API密钥"));
                }

                // 验证API Key
                if (!_apiKeyService.IsValidApiKey(apiKey))
                {
                    return Unauthorized(ApiResponse<object>.FailureResult("无效的API密钥"));
                }

                // 自定义邮箱验证
                var emailValidationErrors = ValidateEmails(request);
                if (emailValidationErrors.Any())
                {
                    return BadRequest(ApiResponse<object>.FailureResult($"邮箱格式错误: {string.Join(", ", emailValidationErrors)}"));
                }

                // 模型验证
                if (!ModelState.IsValid)
                {
                    var errors = ModelState
                        .SelectMany(x => x.Value.Errors)
                        .Select(x => x.ErrorMessage);
                    return BadRequest(ApiResponse<object>.FailureResult($"请求参数错误: {string.Join(", ", errors)}"));
                }

                // 发送邮件
                var result = await _emailService.SendEmailAsync(request, apiKey);

                _logger.LogInformation("邮件发送请求完成，EmailId: {EmailId}, Status: {Status}",
                    result.EmailId, result.Status);

                return Ok(ApiResponse<EmailSendResponse>.SuccessResult(result, "邮件发送请求已处理"));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "邮件发送接口异常");
                return StatusCode(500, ApiResponse<object>.FailureResult("服务器内部错误"));
            }
        }

        /// <summary>
        /// 健康检查
        /// </summary>
        /// <returns>服务状态</returns>
        [HttpGet("health")]
        [ProducesResponseType(typeof(ApiResponse<HealthCheckResponse>), 200)]
        public IActionResult HealthCheck()
        {
            var response = new HealthCheckResponse
            {
                Status = "Healthy",
                Timestamp = DateTime.UtcNow,
                Version = "1.0.0",
                Environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Unknown"
            };

            return Ok(ApiResponse<HealthCheckResponse>.SuccessResult(response, "服务运行正常"));
        }

        /// <summary>
        /// 从请求中获取API密钥
        /// </summary>
        /// <returns>API密钥</returns>
        private string? GetApiKeyFromRequest()
        {
            // 从Authorization Header获取Bearer Token
            var authHeader = Request.Headers.Authorization.FirstOrDefault();
            if (!string.IsNullOrEmpty(authHeader) && authHeader.StartsWith("Bearer "))
            {
                return authHeader.Substring("Bearer ".Length).Trim();
            }

            // 从X-API-Key Header获取
            var apiKeyHeader = Request.Headers["X-API-Key"].FirstOrDefault();
            if (!string.IsNullOrEmpty(apiKeyHeader))
            {
                return apiKeyHeader.Trim();
            }

            return null;
        }

        /// <summary>
        /// 验证邮箱地址格式
        /// </summary>
        /// <param name="request">邮件请求</param>
        /// <returns>验证错误列表</returns>
        private List<string> ValidateEmails(EmailRequest request)
        {
            var errors = new List<string>();
            var emailRegex = new Regex(@"^[^@\s]+@[^@\s]+\.[^@\s]+$");

            // 验证收件人
            if (request.To?.Any() == true)
            {
                foreach (var email in request.To)
                {
                    if (string.IsNullOrWhiteSpace(email) || !emailRegex.IsMatch(email))
                    {
                        errors.Add($"收件人邮箱格式不正确: {email}");
                    }
                }
            }
            else
            {
                errors.Add("收件人不能为空");
            }

            // 验证抄送
            if (request.Cc?.Any() == true)
            {
                foreach (var email in request.Cc)
                {
                    if (!string.IsNullOrWhiteSpace(email) && !emailRegex.IsMatch(email))
                    {
                        errors.Add($"抄送邮箱格式不正确: {email}");
                    }
                }
            }

            // 验证密送
            if (request.Bcc?.Any() == true)
            {
                foreach (var email in request.Bcc)
                {
                    if (!string.IsNullOrWhiteSpace(email) && !emailRegex.IsMatch(email))
                    {
                        errors.Add($"密送邮箱格式不正确: {email}");
                    }
                }
            }

            return errors;
        }
    }

    /// <summary>
    /// 健康检查响应模型
    /// </summary>
    public class HealthCheckResponse
    {
        public string Status { get; set; } = string.Empty;
        public DateTime Timestamp { get; set; }
        public string Version { get; set; } = string.Empty;
        public string Environment { get; set; } = string.Empty;
    }
}
```


### Middleware 文件夹
--------------------------------------------------

#### 文件: Middleware\ApiKeyMiddleware.cs
```csharp
﻿using Microsoft.AspNetCore.Http;
using NotifyHubAPI.Services;
using System.Text.Json;

namespace NotifyHubAPI.Middleware
{
    /// <summary>
    /// API密钥认证中间件
    /// 支持多种认证方式：Authorization Bearer Token 和 X-API-Key Header
    /// </summary>
    public class ApiKeyMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<ApiKeyMiddleware> _logger;
        private readonly IServiceProvider _serviceProvider;

        // 不需要API Key验证的路径
        private readonly HashSet<string> _excludedPaths = new(StringComparer.OrdinalIgnoreCase)
        {
            "/",
            "/swagger",
            "/swagger/index.html",
            "/swagger/v1/swagger.json",
            "/health",
            "/api/email/health"
        };

        public ApiKeyMiddleware(RequestDelegate next, ILogger<ApiKeyMiddleware> logger, IServiceProvider serviceProvider)
        {
            _next = next;
            _logger = logger;
            _serviceProvider = serviceProvider;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            // 检查是否为排除的路径
            if (IsExcludedPath(context.Request.Path))
            {
                await _next(context);
                return;
            }

            // 获取API Key服务（使用作用域）
            using var scope = _serviceProvider.CreateScope();
            var apiKeyService = scope.ServiceProvider.GetRequiredService<IApiKeyService>();

            // 从请求中获取API Key
            var apiKey = GetApiKeyFromRequest(context);

            if (string.IsNullOrEmpty(apiKey))
            {
                _logger.LogWarning("API请求缺少密钥，路径: {Path}, IP: {IP}",
                    context.Request.Path, GetClientIpAddress(context));
                await WriteUnauthorizedResponse(context, "缺少API密钥");
                return;
            }

            // 验证API Key
            if (!apiKeyService.IsValidApiKey(apiKey))
            {
                _logger.LogWarning("无效的API密钥访问尝试，密钥: {ApiKey}, 路径: {Path}, IP: {IP}",
                    MaskApiKey(apiKey), context.Request.Path, GetClientIpAddress(context));
                await WriteUnauthorizedResponse(context, "无效的API密钥");
                return;
            }

            // 获取项目名称并添加到请求上下文
            var projectName = apiKeyService.GetProjectByApiKey(apiKey);
            if (!string.IsNullOrEmpty(projectName))
            {
                context.Items["ProjectName"] = projectName;
                context.Items["ApiKey"] = apiKey;
            }

            _logger.LogDebug("API密钥验证通过，项目: {ProjectName}, 路径: {Path}",
                projectName ?? "Unknown", context.Request.Path);

            // 继续处理请求
            await _next(context);
        }

        /// <summary>
        /// 检查路径是否在排除列表中
        /// </summary>
        private bool IsExcludedPath(PathString path)
        {
            // 完全匹配
            if (_excludedPaths.Contains(path.Value))
                return true;

            // Swagger相关路径
            if (path.StartsWithSegments("/swagger", StringComparison.OrdinalIgnoreCase))
                return true;

            // 健康检查路径
            if (path.StartsWithSegments("/health", StringComparison.OrdinalIgnoreCase))
                return true;

            return false;
        }

        /// <summary>
        /// 从HTTP请求中获取API密钥
        /// </summary>
        private static string? GetApiKeyFromRequest(HttpContext context)
        {
            // 1. 从Authorization Header获取Bearer Token
            var authHeader = context.Request.Headers.Authorization.FirstOrDefault();
            if (!string.IsNullOrEmpty(authHeader) && authHeader.StartsWith("Bearer ", StringComparison.OrdinalIgnoreCase))
            {
                return authHeader.Substring("Bearer ".Length).Trim();
            }

            // 2. 从X-API-Key Header获取
            var apiKeyHeader = context.Request.Headers["X-API-Key"].FirstOrDefault();
            if (!string.IsNullOrEmpty(apiKeyHeader))
            {
                return apiKeyHeader.Trim();
            }

            // 3. 从查询参数获取（仅用于开发环境，不推荐生产使用）
            var apiKeyQuery = context.Request.Query["apikey"].FirstOrDefault();
            if (!string.IsNullOrEmpty(apiKeyQuery))
            {
                return apiKeyQuery.Trim();
            }

            return null;
        }

        /// <summary>
        /// 获取客户端IP地址
        /// </summary>
        private static string GetClientIpAddress(HttpContext context)
        {
            // 检查反向代理头
            var forwardedFor = context.Request.Headers["X-Forwarded-For"].FirstOrDefault();
            if (!string.IsNullOrEmpty(forwardedFor))
            {
                return forwardedFor.Split(',')[0].Trim();
            }

            var realIp = context.Request.Headers["X-Real-IP"].FirstOrDefault();
            if (!string.IsNullOrEmpty(realIp))
            {
                return realIp;
            }

            // 使用连接的远程IP
            return context.Connection.RemoteIpAddress?.ToString() ?? "Unknown";
        }

        /// <summary>
        /// 掩码API密钥用于日志记录
        /// </summary>
        private static string MaskApiKey(string apiKey)
        {
            if (string.IsNullOrEmpty(apiKey))
                return "Empty";

            if (apiKey.Length <= 8)
                return new string('*', apiKey.Length);

            return apiKey.Substring(0, 4) + new string('*', apiKey.Length - 8) + apiKey.Substring(apiKey.Length - 4);
        }

        /// <summary>
        /// 写入未授权响应
        /// </summary>
        private static async Task WriteUnauthorizedResponse(HttpContext context, string message)
        {
            context.Response.StatusCode = 401;
            context.Response.ContentType = "application/json";

            var response = new
            {
                success = false,
                message = message,
                timestamp = DateTime.UtcNow,
                requestId = Guid.NewGuid().ToString("N")[..8]
            };

            var jsonResponse = JsonSerializer.Serialize(response, new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            });

            await context.Response.WriteAsync(jsonResponse);
        }
    }

    /// <summary>
    /// API密钥中间件扩展方法
    /// </summary>
    public static class ApiKeyMiddlewareExtensions
    {
        /// <summary>
        /// 添加API密钥认证中间件
        /// </summary>
        public static IApplicationBuilder UseApiKeyAuthentication(this IApplicationBuilder builder)
        {
            return builder.UseMiddleware<ApiKeyMiddleware>();
        }
    }
}
```


### Models 文件夹
--------------------------------------------------

#### 文件: Models\ApiResponse.cs
```csharp
﻿namespace NotifyHubAPI.Models
{
    public class ApiResponse<T>
    {
        public bool Success { get; set; }
        public string Message { get; set; } = string.Empty;
        public T? Data { get; set; }
        public string? RequestId { get; set; }
        public DateTime Timestamp { get; set; } = DateTime.UtcNow;

        public static ApiResponse<T> SuccessResult(T data, string message = "操作成功")
        {
            return new ApiResponse<T>
            {
                Success = true,
                Message = message,
                Data = data,
                RequestId = Guid.NewGuid().ToString("N")[..8]
            };
        }

        public static ApiResponse<T> FailureResult(string message, T? data = default)
        {
            return new ApiResponse<T>
            {
                Success = false,
                Message = message,
                Data = data,
                RequestId = Guid.NewGuid().ToString("N")[..8]
            };
        }
    }

    public class EmailSendResponse
    {
        public string EmailId { get; set; } = string.Empty;
        public EmailStatus Status { get; set; }
        public string Message { get; set; } = string.Empty;
    }
}
```

#### 文件: Models\EmailRecord.cs
```csharp
﻿using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace NotifyHubAPI.Models
{
    [Table("EmailRecords")]
    public class EmailRecord
    {
        [Key]
        public Guid Id { get; set; } = Guid.NewGuid();

        [Required]
        [StringLength(1000)]
        public string ToAddresses { get; set; } = string.Empty;

        [StringLength(1000)]
        public string? CcAddresses { get; set; }

        [StringLength(1000)]
        public string? BccAddresses { get; set; }

        [Required]
        [StringLength(500)]
        public string Subject { get; set; } = string.Empty;

        [Required]
        public string Body { get; set; } = string.Empty;

        public EmailPriority Priority { get; set; }

        [Required]
        [StringLength(100)]
        public string Category { get; set; } = string.Empty;

        public bool IsHtml { get; set; }

        public EmailStatus Status { get; set; } = EmailStatus.Pending;

        [StringLength(2000)]
        public string? ErrorMessage { get; set; }

        public int RetryCount { get; set; } = 0;

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        public DateTime? SentAt { get; set; }

        public DateTime? LastRetryAt { get; set; }

        [Required]
        [StringLength(100)]
        public string ApiKey { get; set; } = string.Empty;

        [StringLength(50)]
        public string? RequestId { get; set; }
    }

    public enum EmailStatus
    {
        Pending = 0,
        Sent = 1,
        Failed = 2,
        Retrying = 3,
        Cancelled = 4
    }
}
```

#### 文件: Models\EmailRequest.cs
```csharp
﻿using System.ComponentModel.DataAnnotations;

namespace NotifyHubAPI.Models
{
    public class EmailRequest
    {
        [Required(ErrorMessage = "收件人不能为空")]
        public List<string> To { get; set; } = new();

        public List<string>? Cc { get; set; }

        public List<string>? Bcc { get; set; }

        [Required(ErrorMessage = "邮件主题不能为空")]
        [StringLength(500, ErrorMessage = "主题长度不能超过500字符")]
        public string Subject { get; set; } = string.Empty;

        [Required(ErrorMessage = "邮件内容不能为空")]
        [StringLength(50000, ErrorMessage = "邮件内容长度不能超过50000字符")]
        public string Body { get; set; } = string.Empty;

        public EmailPriority Priority { get; set; } = EmailPriority.Normal;

        [Required(ErrorMessage = "邮件分类不能为空")]
        [StringLength(100, ErrorMessage = "分类长度不能超过100字符")]
        public string Category { get; set; } = string.Empty;

        public bool IsHtml { get; set; } = false;

        public Dictionary<string, string>? Attachments { get; set; }
    }

    public enum EmailPriority
    {
        Low = 0,
        Normal = 1,
        High = 2
    }
}
```


### Services 文件夹
--------------------------------------------------

#### 文件: Services\ApiKeyService.cs
```csharp
﻿using Microsoft.Extensions.Options;

namespace NotifyHubAPI.Services
{
    public interface IApiKeyService
    {
        /// <summary>
        /// 验证API密钥是否有效
        /// </summary>
        /// <param name="apiKey">API密钥</param>
        /// <returns>是否有效</returns>
        bool IsValidApiKey(string apiKey);

        /// <summary>
        /// 根据API密钥获取项目名称
        /// </summary>
        /// <param name="apiKey">API密钥</param>
        /// <returns>项目名称，如果不存在返回null</returns>
        string? GetProjectByApiKey(string apiKey);

        /// <summary>
        /// 获取所有有效的API密钥
        /// </summary>
        /// <returns>API密钥字典</returns>
        Dictionary<string, string> GetAllApiKeys();
    }

    public class ApiKeyService : IApiKeyService
    {
        private readonly Dictionary<string, string> _apiKeys;
        private readonly ILogger<ApiKeyService> _logger;

        public ApiKeyService(IConfiguration configuration, ILogger<ApiKeyService> logger)
        {
            _logger = logger;
            _apiKeys = new Dictionary<string, string>();

            // 从配置文件加载API密钥
            var apiKeysSection = configuration.GetSection("ApiKeys");
            foreach (var kvp in apiKeysSection.GetChildren())
            {
                var projectName = kvp.Key;
                var apiKey = kvp.Value;

                if (!string.IsNullOrEmpty(apiKey))
                {
                    _apiKeys[apiKey] = projectName;
                    _logger.LogInformation("已加载API密钥配置，项目: {ProjectName}", projectName);
                }
            }

            if (_apiKeys.Count == 0)
            {
                _logger.LogWarning("未找到任何API密钥配置");
            }
        }

        public bool IsValidApiKey(string apiKey)
        {
            if (string.IsNullOrEmpty(apiKey))
                return false;

            var isValid = _apiKeys.ContainsKey(apiKey);

            if (!isValid)
            {
                _logger.LogWarning("无效的API密钥访问尝试: {ApiKey}", apiKey[..Math.Min(8, apiKey.Length)] + "...");
            }

            return isValid;
        }

        public string? GetProjectByApiKey(string apiKey)
        {
            if (string.IsNullOrEmpty(apiKey))
                return null;

            return _apiKeys.TryGetValue(apiKey, out var projectName) ? projectName : null;
        }

        public Dictionary<string, string> GetAllApiKeys()
        {
            // 返回项目名到API密钥的映射，用于管理界面
            return _apiKeys.ToDictionary(kvp => kvp.Value, kvp => kvp.Key);
        }
    }
}
```

#### 文件: Services\EmailService.cs
```csharp
﻿using MailKit.Net.Smtp;
using MailKit.Security;
using MimeKit;
using MimeKit.Text;

namespace NotifyHubAPI.Services
{
    public class SimpleEmailService : IEmailService
    {
        private readonly SmtpSettings _smtpSettings;
        private readonly ILogger<SimpleEmailService> _logger;

        public SimpleEmailService(
            IOptions<SmtpSettings> smtpSettings,
            ILogger<SimpleEmailService> logger)
        {
            _smtpSettings = smtpSettings.Value;
            _logger = logger;
        }

        public async Task<EmailSendResponse> SendEmailAsync(EmailRequest emailRequest, string apiKey, CancellationToken cancellationToken = default)
        {
            var requestId = Guid.NewGuid().ToString("N")[..8];
            var emailId = Guid.NewGuid();

            _logger.LogInformation("开始发送邮件，RequestId: {RequestId}, Category: {Category}", requestId, emailRequest.Category);

            try
            {
                // 直接发送邮件，不保存到数据库
                await SendEmailInternalAsync(emailRequest, cancellationToken);

                _logger.LogInformation("邮件发送成功，EmailId: {EmailId}, RequestId: {RequestId}", emailId, requestId);

                return new EmailSendResponse
                {
                    EmailId = emailId.ToString(),
                    Status = EmailStatus.Sent,
                    Message = "邮件发送成功"
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "邮件发送失败，EmailId: {EmailId}, RequestId: {RequestId}", emailId, requestId);

                return new EmailSendResponse
                {
                    EmailId = emailId.ToString(),
                    Status = EmailStatus.Failed,
                    Message = $"邮件发送失败: {ex.Message}"
                };
            }
        }

        public Task<bool> RetryEmailAsync(Guid emailId, CancellationToken cancellationToken = default)
        {
            _logger.LogWarning("简化版本不支持邮件重试功能");
            return Task.FromResult(false);
        }

        public Task<EmailRecord?> GetEmailStatusAsync(Guid emailId)
        {
            _logger.LogWarning("简化版本不支持邮件状态查询");
            return Task.FromResult<EmailRecord?>(null);
        }

        public Task<List<EmailRecord>> GetPendingRetryEmailsAsync(int maxRetryCount, int retryDelayMinutes)
        {
            return Task.FromResult(new List<EmailRecord>());
        }

        public Task<(List<EmailRecord> Records, int TotalCount)> GetEmailHistoryAsync(
            string? category = null,
            EmailStatus? status = null,
            DateTime? startDate = null,
            DateTime? endDate = null,
            int pageIndex = 1,
            int pageSize = 20)
        {
            return Task.FromResult((new List<EmailRecord>(), 0));
        }

        private async Task SendEmailInternalAsync(EmailRequest emailRequest, CancellationToken cancellationToken = default)
        {
            var message = new MimeMessage();

            // 设置发件人
            message.From.Add(new MailboxAddress(_smtpSettings.FromName, _smtpSettings.FromEmail));

            // 设置收件人
            foreach (var to in emailRequest.To)
            {
                message.To.Add(MailboxAddress.Parse(to.Trim()));
            }

            // 设置抄送
            if (emailRequest.Cc?.Any() == true)
            {
                foreach (var cc in emailRequest.Cc)
                {
                    message.Cc.Add(MailboxAddress.Parse(cc.Trim()));
                }
            }

            // 设置密送
            if (emailRequest.Bcc?.Any() == true)
            {
                foreach (var bcc in emailRequest.Bcc)
                {
                    message.Bcc.Add(MailboxAddress.Parse(bcc.Trim()));
                }
            }

            // 设置主题
            message.Subject = emailRequest.Subject;

            // 设置优先级
            message.Priority = emailRequest.Priority switch
            {
                EmailPriority.High => MessagePriority.Urgent,
                EmailPriority.Low => MessagePriority.NonUrgent,
                _ => MessagePriority.Normal
            };

            // 设置邮件正文
            var textFormat = emailRequest.IsHtml ? TextFormat.Html : TextFormat.Plain;
            message.Body = new TextPart(textFormat)
            {
                Text = emailRequest.Body
            };

            // 发送邮件
            using var smtpClient = new SmtpClient();

            try
            {
                // 连接到SMTP服务器
                await smtpClient.ConnectAsync(_smtpSettings.Host, _smtpSettings.Port,
                    _smtpSettings.UseSsl ? SecureSocketOptions.StartTls : SecureSocketOptions.None, cancellationToken);

                // 身份验证
                await smtpClient.AuthenticateAsync(_smtpSettings.Username, _smtpSettings.Password, cancellationToken);

                // 发送邮件
                await smtpClient.SendAsync(message, cancellationToken);

                _logger.LogInformation("SMTP邮件发送成功");
            }
            finally
            {
                if (smtpClient.IsConnected)
                {
                    await smtpClient.DisconnectAsync(true, cancellationToken);
                }
            }
        }
    }
}
```

#### 文件: Services\IEmailService.cs
```csharp
﻿using NotifyHubAPI.Models;

namespace NotifyHubAPI.Services
{
    public interface IEmailService
    {
        /// <summary>
        /// 发送邮件
        /// </summary>
        /// <param name="emailRequest">邮件请求</param>
        /// <param name="apiKey">API密钥</param>
        /// <param name="cancellationToken">取消令牌</param>
        /// <returns>邮件发送响应</returns>
        Task<EmailSendResponse> SendEmailAsync(EmailRequest emailRequest, string apiKey, CancellationToken cancellationToken = default);

        /// <summary>
        /// 重试发送失败的邮件
        /// </summary>
        /// <param name="emailId">邮件ID</param>
        /// <param name="cancellationToken">取消令牌</param>
        /// <returns>是否重试成功</returns>
        Task<bool> RetryEmailAsync(Guid emailId, CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取邮件发送状态
        /// </summary>
        /// <param name="emailId">邮件ID</param>
        /// <returns>邮件记录</returns>
        Task<EmailRecord?> GetEmailStatusAsync(Guid emailId);

        /// <summary>
        /// 获取待重试的邮件列表
        /// </summary>
        /// <param name="maxRetryCount">最大重试次数</param>
        /// <param name="retryDelayMinutes">重试延迟分钟数</param>
        /// <returns>待重试的邮件列表</returns>
        Task<List<EmailRecord>> GetPendingRetryEmailsAsync(int maxRetryCount, int retryDelayMinutes);

        /// <summary>
        /// 获取邮件发送历史
        /// </summary>
        /// <param name="category">分类</param>
        /// <param name="status">状态</param>
        /// <param name="startDate">开始日期</param>
        /// <param name="endDate">结束日期</param>
        /// <param name="pageIndex">页码</param>
        /// <param name="pageSize">页大小</param>
        /// <returns>邮件历史记录</returns>
        Task<(List<EmailRecord> Records, int TotalCount)> GetEmailHistoryAsync(
            string? category = null,
            EmailStatus? status = null,
            DateTime? startDate = null,
            DateTime? endDate = null,
            int pageIndex = 1,
            int pageSize = 20);
    }
}
```

#### 文件: Services\SmtpSettings.cs
```csharp
﻿namespace NotifyHubAPI.Services
{
    public class SmtpSettings
    {
        public string Host { get; set; } = string.Empty;
        public int Port { get; set; }
        public bool UseSsl { get; set; }
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string FromEmail { get; set; } = string.Empty;
        public string FromName { get; set; } = string.Empty;
    }
}
```
